# Generated by Django 4.2.23 on 2025-08-17 19:26

import cloudinary.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CarrinhoAbandonado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('whatsapp', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Formato deve ser: (XX) XXXXX-XXXX ou (XX) XXXX-XXXX', regex='^\\(\\d{2}\\)\\s\\d{4,5}-\\d{4}$')], verbose_name='WhatsApp')),
                ('dados_carrinho', models.JSONField(verbose_name='Dados do carrinho')),
                ('valor_estimado', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Valor estimado')),
                ('tempo_abandono', models.DateTimeField(verbose_name='Momento do abandono')),
                ('webhook_enviado', models.BooleanField(default=False, verbose_name='Webhook enviado')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
            ],
            options={
                'verbose_name': 'Carrinho Abandonado',
                'verbose_name_plural': 'Carrinhos Abandonados',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Categoria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, unique=True, verbose_name='Nome')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('descricao', models.TextField(blank=True, verbose_name='Descrição')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('ordem', models.PositiveIntegerField(default=0, verbose_name='Ordem')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
            ],
            options={
                'verbose_name': 'Categoria',
                'verbose_name_plural': 'Categorias',
                'ordering': ['ordem', 'nome'],
            },
        ),
        migrations.CreateModel(
            name='ConfiguracaoGeral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chave', models.CharField(max_length=100, unique=True, verbose_name='Chave')),
                ('valor', models.TextField(verbose_name='Valor')),
                ('descricao', models.TextField(blank=True, verbose_name='Descrição')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Configuração Geral',
                'verbose_name_plural': 'Configurações Gerais',
            },
        ),
        migrations.CreateModel(
            name='ConfiguracaoWebhook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('evento', models.CharField(choices=[('liberacao_preco', 'Liberação de preços'), ('carrinho_abandonado', 'Carrinho abandonado'), ('pedido_finalizado', 'Pedido finalizado')], max_length=20, unique=True, verbose_name='Evento')),
                ('url', models.URLField(verbose_name='URL do webhook')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('timeout', models.PositiveIntegerField(default=30, verbose_name='Timeout (segundos)')),
                ('retry_ativo', models.BooleanField(default=True, verbose_name='Retry ativo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Configuração de Webhook',
                'verbose_name_plural': 'Configurações de Webhooks',
            },
        ),
        migrations.CreateModel(
            name='JornadaCliente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('whatsapp', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message='Formato deve ser: (XX) XXXXX-XXXX ou (XX) XXXX-XXXX', regex='^\\(\\d{2}\\)\\s\\d{4,5}-\\d{4}$')], verbose_name='WhatsApp')),
                ('sessao_id', models.CharField(max_length=100, verbose_name='ID da sessão')),
                ('evento', models.CharField(choices=[('entrada', 'Entrada no site'), ('liberacao_preco', 'Liberação de preços'), ('categoria_visitada', 'Categoria visitada'), ('pesquisa', 'Pesquisa realizada'), ('produto_visualizado', 'Produto visualizado'), ('item_adicionado', 'Item adicionado ao carrinho'), ('item_removido', 'Item removido do carrinho'), ('checkout_iniciado', 'Checkout iniciado'), ('pedido_finalizado', 'Pedido finalizado'), ('saida', 'Saída do site')], max_length=20, verbose_name='Evento')),
                ('dados_evento', models.JSONField(blank=True, null=True, verbose_name='Dados do evento')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
            ],
            options={
                'verbose_name': 'Jornada do Cliente',
                'verbose_name_plural': 'Jornadas dos Clientes',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='MarcaCelular',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, unique=True, verbose_name='Nome')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('ordem', models.PositiveIntegerField(default=0, verbose_name='Ordem')),
            ],
            options={
                'verbose_name': 'Marca de Celular',
                'verbose_name_plural': 'Marcas de Celular',
                'ordering': ['ordem', 'nome'],
            },
        ),
        migrations.CreateModel(
            name='ModeloCelular',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome')),
                ('slug', models.SlugField(verbose_name='Slug')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('ordem', models.PositiveIntegerField(default=0, verbose_name='Ordem')),
                ('marca', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.marcacelular', verbose_name='Marca')),
            ],
            options={
                'verbose_name': 'Modelo de Celular',
                'verbose_name_plural': 'Modelos de Celular',
                'ordering': ['ordem', 'nome'],
                'unique_together': {('marca', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='Pedido',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo', models.CharField(max_length=20, unique=True, verbose_name='Código')),
                ('whatsapp', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Formato deve ser: (XX) XXXXX-XXXX ou (XX) XXXX-XXXX', regex='^\\(\\d{2}\\)\\s\\d{4,5}-\\d{4}$')], verbose_name='WhatsApp')),
                ('nome_cliente', models.CharField(blank=True, max_length=200, verbose_name='Nome do cliente')),
                ('status', models.CharField(choices=[('aberto', 'Aberto'), ('solucionado', 'Solucionado'), ('cancelado', 'Cancelado')], default='aberto', max_length=20, verbose_name='Status')),
                ('valor_total', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Valor total')),
                ('observacoes', models.TextField(blank=True, verbose_name='Observações')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Pedido',
                'verbose_name_plural': 'Pedidos',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProdutoNormal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=200, verbose_name='Nome')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('descricao', models.TextField(verbose_name='Descrição')),
                ('fabricante', models.CharField(blank=True, max_length=100, verbose_name='Fabricante')),
                ('caracteristicas', models.TextField(blank=True, verbose_name='Características')),
                ('em_estoque', models.BooleanField(default=True, verbose_name='Em estoque')),
                ('destaque', models.BooleanField(default=False, verbose_name='Produto em destaque')),
                ('quantidade_super_atacado', models.PositiveIntegerField(default=10, verbose_name='Quantidade mínima para super atacado')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('preco_atacado', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Preço atacado')),
                ('preco_super_atacado', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Preço super atacado')),
                ('categoria', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.categoria', verbose_name='Categoria')),
            ],
            options={
                'verbose_name': 'Produto Normal',
                'verbose_name_plural': 'Produtos Normais',
            },
        ),
        migrations.CreateModel(
            name='ProdutoCapaPelicula',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=200, verbose_name='Nome')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('descricao', models.TextField(verbose_name='Descrição')),
                ('fabricante', models.CharField(blank=True, max_length=100, verbose_name='Fabricante')),
                ('caracteristicas', models.TextField(blank=True, verbose_name='Características')),
                ('em_estoque', models.BooleanField(default=True, verbose_name='Em estoque')),
                ('destaque', models.BooleanField(default=False, verbose_name='Produto em destaque')),
                ('quantidade_super_atacado', models.PositiveIntegerField(default=10, verbose_name='Quantidade mínima para super atacado')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('categoria', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.categoria', verbose_name='Categoria')),
            ],
            options={
                'verbose_name': 'Produto Capa/Película',
                'verbose_name_plural': 'Produtos Capa/Película',
            },
        ),
        migrations.CreateModel(
            name='PrecoModelo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preco_atacado', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Preço atacado')),
                ('preco_super_atacado', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Preço super atacado')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('modelo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.modelocelular', verbose_name='Modelo')),
                ('produto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.produtocapapelicula', verbose_name='Produto')),
            ],
            options={
                'verbose_name': 'Preço por Modelo',
                'verbose_name_plural': 'Preços por Modelo',
                'unique_together': {('produto', 'modelo')},
            },
        ),
        migrations.CreateModel(
            name='ItemPedido',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('normal', 'Produto Normal'), ('modelo', 'Modelo de Capa/Película')], max_length=10, verbose_name='Tipo')),
                ('quantidade', models.PositiveIntegerField(verbose_name='Quantidade')),
                ('preco_unitario', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Preço unitário')),
                ('preco_total', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Preço total')),
                ('pedido', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='itens', to='catalog.pedido')),
                ('preco_modelo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='catalog.precomodelo', verbose_name='Preço do Modelo')),
                ('produto_normal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='catalog.produtonormal', verbose_name='Produto Normal')),
            ],
            options={
                'verbose_name': 'Item do Pedido',
                'verbose_name_plural': 'Itens do Pedido',
            },
        ),
        migrations.CreateModel(
            name='ImagemProduto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('imagem', cloudinary.models.CloudinaryField(max_length=255, verbose_name='Imagem')),
                ('alt_text', models.CharField(blank=True, max_length=200, verbose_name='Texto alternativo')),
                ('ordem', models.PositiveIntegerField(default=0, verbose_name='Ordem')),
                ('principal', models.BooleanField(default=False, verbose_name='Imagem principal')),
                ('produto_capa', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='imagens', to='catalog.produtocapapelicula')),
                ('produto_normal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='imagens', to='catalog.produtonormal')),
            ],
            options={
                'verbose_name': 'Imagem do Produto',
                'verbose_name_plural': 'Imagens dos Produtos',
                'ordering': ['ordem'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_vendedor', models.BooleanField(default=False, verbose_name='É vendedor')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
